html {
    background-color: blue;
    margin: 0px;
    padding: 0px;

}

.div1  {
    background-color: rgb(142, 202, 255);
    margin: 0px;
    width: 100%;
}

.div1 a, iframe,h1,h2,h3,h4,h5,h6  {
    /* 
        display: block; -> faz com que os elementos sejam criados um abaixo do outro.
        Elementos block padrão:
        div
        parágrafos (p)
        títulos (h1 - h6)

        display: inline; -> faz com que os elementos sejam criados um do lado do outro, ocupando
        apenas a largura/espaço necessário.
        Elementos inline por padrão:
        span
        link (a)
        imagem (img)

        display: flex; ->Torna o elemento um flex container automaticamente transformando 
        todos os seus filhos diretos em flex itens.

        display: none; -> O elemento continua existindo, mas não é exibido para o usuário no navegador.
                          O espaço do elemento não é ocupado.

    */
    display: block;
    margin: 0px;
}

.div1 p {
    margin: 0px;
    /* Colocando estilo da fonte */
    font-family: 'Verdana';

    /* Tamanho da fonte */
    font-size: 15px;

    /* 
        Expessura da fonte.
        font-weight: normal; -> Fonte normal.
        font-weight: bold; -> Fonte mais grossa.
    */
    font-weight: bold;
    

    /* 
    Aplicando linhas em texto.
    text-decoration: underline; -> Linha em baixo do texto (sublinhado).
    text-decoration: overline; -> Linha por cima do texto.
    text-decoration: none; -> Retira as linhas.
    */
    text-decoration: underline;
    

    /* Alinhando textos 
        text-align: left;           -> Alinha os textos para a esquerda.
        text-align: center;         -> Alinha os textos para o centro.
        text-align: right;          -> Alinha os textos para a direita.
        text-align: justify;        -> Os conteúdos inline são justificados. 
                                     Text should be spaced to line up its left 
                                     and right edges to the left and right edges of 
                                     the line box, except for the last line.
        text-align: justify-all;    -> Semelhante a justify, porém força a última linha a ser justificada.
        text-align: start;          -> Igual left se a direção é esquerda-para-direita e right se a direção é direita-para-esquerda.
        text-align: end;            ->Igual right se a direção é esquerda-para-direita e left se a direção é direita-para-esquerda.
        text-align: match-parent;   ->Similar to inherit, but the values start and end are calculated according the parent's direction (en-US) and are replaced by the adequate left or right value.    
    */
    text-align: center;

    /* Definindo altura das linhas
        line-height: 24px; -> Cada linha do parágrafo possui 24px de altura
    */
    line-height: 30px;
}

/*************************************************************************************************************/

.div2{
    background-color: rgb(190, 190, 190);
    width: 100%;
    padding: 10px;

    /* Largura da borda */
    border-width: 2px;

    /* Estilo da borda
        border-style: solid; -> Borda sólida
        border-style: dashed; -> Borda tracejada
        border-style: dotted; -> Borda pontilhada
        para acessar uma lista de estilos, basta usar as teclas ctrl + space
    */
    border-style: solid;
    /* Sem o estilo definido, a borda não aparece */

    /* Cor da borda */
    border-color: brown;

    /* Arredondamento de bordas */
    border-radius: 10px 20px 30px 40px;

    /* Maneira resumida de usar borda
        border: 2px dashed red;
        Primeiro valor é a grossura da borda
        Segundo valor é o estilo da borda
        Terceiro valor é a cor da borda
    */

    /* 
        border-top:;
        border-bottom: 
        border-left: 
        border-right: 
        
        border: none;
    */

}
.div2 p{
    /* Margin
    margin: 10px; -> Essa margem representa a distância para todos os lados do elemento.
    margin-top: 10px; -> Margem para a parte superior.
    margin-right: 10px; ->  Margem para a direita.
    margin-bottom: 10px -> Margem para a base.
    margin-left: 10px; -> Margem para a esquerda.
    margin: 10px 20px; -> Margem para, respectivamente, 10px para topo e base, 20px para os lados.
    margin: 10px 20px 30px 40px; -> Margem para, respectivamente, topo, direita, base e esquerda.

    Uma maneira de centralizar um elemento usando margin é:
    margin: 10px auto; -> Isso faz com que as margens dos lados tenham o mesmo tamanho calculado automaticamente.

    Utilizando o valor 0 na margin, a margem do objeto é removida.

    */
    margin: 0px;

    /* Padding
    Espaço interno que fica ao redor do conteúdo do elemento, Serve para gerar espaços dentro do elemento
    Suas sintaxes são iguais ao do margin
    padding: 10px;
    padding-top: 10px;
    padding-right: 10px;
    padding-bottom: 10px;
    padding-lef: 10px;
    padding: 10px 20px;
    padding: 10px 20px 30px 40px;
    */
}

/*************************************************************************************************************/


.div3 .imagem-fundo{
    /*
        Para preencher o fundo de um elemento com uma imagem:
    */
    background-image: url(img/cat-1.jpg);

    /*
        Ao utilizar o background-image a imagem de fundo vai se repetir para preencher o fundo.
        Para impedir, basta usar o background-repeat com o valor no-repeat;
    */
    background-repeat: no-repeat;

    /*
        background-repeat: repeat-x     -> Repete a imagem horizontalmente.
        background-repeat: repeat-y     -> Repete a imagem verticalmente.

        Ao utilizar a propriedade background-repeat para não repetir a imagem ou então
        para repetir apenas em uma direção, podemos preencher o espaço que a imagem não 
        ocupa utilizando background-color.
    */

    /*
        Depois de inserir a imagem de fundo, podemos alterar sua posição utilizando background-position.

        background-position: center;        -> Centralizando a imagem de fundo.
        background-position: right;         -> Posicionando a imagem de fundo à direita.
        background-position: left;          -> Posicionando a imagem de fundo à esquerda.
        background-position: top;           -> Posicionando a imagem de fundo na parte superior do elemento.
        background-position: bottom;        -> Posicionando a imagem de fundo na parte inferior do elemento.

    */

    /* 
        Ajustando o tamanho da imagem de fundo.

        background-size: cover;     -> Imagem ocupa todo o espaço do elemento. 
                                       Apenas parte da imagem é exibida.
        background-size: contain;   -> Estica a imagem até que ela caiba no elemento sem perder sua proporção.
        
        Podemos utilizar dois valores e definir o tamanho do elemento que a imagem vai ocupar.
        O primeiro valor define a largura e o segundo a altura.
        background-size: 50% 70%;

        Para deixar a imagem estática, utilizamos a propriedade background-attachment.
        background-attachment: fixed;
    */

    /*
        Podemos escrever as propriedades do background de maneira reduzida.

        Basta usar a propriedade background e inserir os valores que deseja utilizar
        não importando a ordem.
        
        background: top right no-repeat #of0 fixed url(img/caminho-da-imagem.jpg);

        Também não há a necessidade de utilizar todos os valores.
    */

}

/*************************************************************************************************************/

/* 
    Valor relativo é aquele que define o valor com base em um outro elemento.

    vw é uma medida de valor relativo que se refere a largura da tela
    cada 1vw corresponde a 1% da largura da tela.
    O vw conta o espaço que fica por baixo da barra de rolagem como parte da tela.

    O vh funciona da mesma maneira que op vw, porém o vh faz referência a altura da tela.
*/

/* 
    Introdução ao calc

    Em alguns casos, queremos que a imagem ocupe toda a largura da tela.
    Porém, se precisarmos adicionar à imagem uma borda, margem ou padding isso irá quebrar a página.

    img {
        width: 100vw;
        margin: 30px;
    }

    A imagem continua tendo 100vw, mas a margem a afasta 
    30px de cada um dos lados dela, colocando-a fora da tela.

    Para impedir que isso aconteça, podemos utilizar o calc:

    img {
        width: calc(100vw - 60px);
        margin: 30px;
    }

    Através desse calc, tiramos 60px de largura da imagem (30px da direita, 30px da esquerda)
    fazendo com que a imagem ocupe 100vw.

*/

/* 
    Altura/Largura Máxima/Mínima de um elemento.

    min-height define a altura mínima que um elemento pode ter.
    max-height define a altura máxima que um elemento pode ter.

    min-width define a largura mínima que um elemento pode ter.
    max-width define a largura máxima que um elemento pode ter.
*/

/* 
    Overflow

    Imagine que você quer colocar um texto em uma área de tamanho fixo em uma página.
    Porém, esse texto é muito grande e acaba ultrapassando o tamanho da área
    Isso pode ser resolvido através do uso do overflow.

    O overflow garante que o conteúdo respeite as dimensões do elemento.
    Ele faz isso criando uma barra de rolagem que permite a leitura do texto sem ultrapassar o tamanho.

    Para utilizar ele, deve utilizar a propriedade overflow no elemento que queremos que tenha o tamanho
    respeitado.

    overflow: scroll;       -> Exibe uma barra de rolagem no elemento para garantir que o conteúdo
                               interno não ultrapasse o tamanho definido no CSS.
                               Uma barra de rolagem será exibida até mesmo quando o tamanho limite
                               não for ultrapassado. Exibe barra de rolagem vertical e horizontal.

    overflow: auto;         -> Exibe uma barra de rolagem apenas se o conteúdo ultrapassar o tamanho
                               limite do elemento.

    Para que o overflow afete apenas uma barra em específico, utilizamos as propriedades:
    overflow-x      -> Controla o scroll horizontal adicionando uma barra de rolagem horizontal.
    overflow-y      -> Controla o scroll vertical adicionando uma barra de rolagem vertical.

    Quando uma das propriedades acima é utilizada, a outra é automaticamente definida com o atributo auto.
    Isso faz com que, caso eu use o overflow-x, o valor da propriedade overflow-y será definido
    automaticamente com o valor auto, mesmo eu não declarando ela.
    Para resolver isso, garanta que o tamanho do elemento comporte o conteúdo dentro do limite, para que
    a barra de rolagem não seja exibida.

    As propriedades do overflow podem ser simplificadas:
    overflow: auto scroll;  -> Referem au overflow-x e overflow-y.
*/

/* 
    Visibility

    visibility é uma propriedade do CSS que controla a visibildiade de um elemento na tela.
    Possui duas propriedades mais usadas: visible e hidden.

    visible indica que o elemento está visível, esse é o valor padrão de todo elemento.
    hidden, por sua vês, deixa o elemento invisível na tela.

    Apesar da semelhança com o display: none, visibility não remove o espaço do elemento da tela,
    não apenas o deixa invisível.
*/

/*
    Opacity

    A propriedade opacity define a opacidade de um elemento HTML, ou seja, seu nível de trasnparência.

    Sintaxe - 
    opacity: 50%;

    A propriedade aceita valores entre 0 a 100%. Quanto menor esse valor, mais transparente o elemento
    se torna.

    Por padrão, a opacidade do elemento é 100%.
*/

/*
    Box-Sizing

    É uma propriedade do CSS que altera a forma como o tamanho de um elemento é calculado.
    Por padrão, o tamanho de um elemento leva em conta sua altura, largura, padding e border.

    Repare que mesmo tendo definido a largura como 350px o elemento cresceu e ficou com 390px de largura.

    div{
        width: 350px;
        padding-left: 20px;
        padding-right: 20px;
    }

    Largura total: 350px(width) + 20px(padding-left) + 20px(padding-right) = 390px.

    Para impedir que o elemento cresça, utilizamos o box-sizing:border-box, com isso, 
    o padding será incluido na largura total.

    div{
        width: 350px;
        padding-left: 20px;
        padding-right: 20px;
        box-sizing: border-box;
    }

    Internamente o CSS vai subtrair o padding do width.
    Largura total: 310px + 20px + 20px = 350px.

    O mesmo vale para a altura, um elemento com 200px de altura e 10px de 
    padding em cada ponta ficaria assim:

    div{
        height: 200px;
        padding-top:10px;
        padding-bottom: 10px;
        box-sizing: border-box;
    }

    Altura total: 180px + 10px + 10px = 200px.

    Com box-sizing: border-box, as medidas do elemento passam a ser respeitadas 
    e os valores de padding e border passam a ser incluídos no valor da largura.

    Sintaxe

    box-sizing é uma propriedade do CSS e sua sintaxe é semelhante a outras propriedades, com
    nome e valor

    box-sizing: border-box;     -> Respeita as medidas do elemento.
    box-sizing: content-box;    -> Esse é o valor padrão de todo elemento.
*/

/*
    Box-shadow

    O box-shadow é uma propriedade do CSS que permite adicionar sombra em volta dos elementos.
    Pode ser aplicada em qualquer elemento HTML.

    Para o box-shadow funcionar, ele precisa receber os valores de deslocamento-x e deslocamento-y

    img{
        width: 250px;
        height: 250px;
        box-shadow: 20px 0;
    }

    Deslocamento é o valor que define a posição em que a sombra vai aparecer.
    O valor padrão dos eixos x e y é 0, o que significa que a sombra está atrás do elemento.

    Quando deslocamos a sombra, sua posição é ajustada a partir da posição do elemento.

    No eixo x, um valor positivo move a sombra para a direita.
    Já um valor negativo no eixo x move a sombra para a esquerda.

    No eixo y um valor positivo move a sombra para baixo.
    Já um valor negativo no eixo

    Box-shadow Desfoque

    É possível aplicar um efeito de desfoque à sombra adicionando um terceiro valor ao box-shadow
    Quanto maior o valor, maior o desfoque

    box-shadow: 20px 20px 10px;

    O valor 0 tem o mesmo efeito de não informar o desfoque
    O uso do valor desfoque é opcional

    Box-shadow Expansão

    Por padrão, a sombra tem o mesmo tamanho do elemento

    É possível expandir a sombra para todas as direções adicionando
    um quarto valor ao box-shadow.
    O uso do valor de expansão é opcional, porém, se for utilizá-lo é necessário informar
    o desfoque, ainda que com valor zerado.

    box-shadow: 0 0 0 30px;

    Box-shadow Cor

    Por padrão, a sombra tem a cor preta (#000000)
    É possível alterar a cor da sombra preenchendo um quinto valor
    com a cor desejada.
    A cor pode ser preenchida nos formatos nominal, RGB ou Hexadecimal.

    box-shadow: 20px 0 0 0 blue;

    Box-shadow Inset

    Por padrão, o box-shadow cria uma sombra com o tamanho do elemento atrás dele.
    O valor inset modifica isso, criando a sombra na frente do elemento com a expansão informada.

    Se expandirmos uma sombra inset em 20px ela contará esse tamanho a partir das bordas do elemento

    box-shadow: 0 0 0 20px black inset;

    O valor inset funciona com divs, spans e outros elementos, mas não com imagens.
    O valor inset pode ser colocado no início ou no final do box-shadow.

    box-shadow: inset 20px 20px 0 0 blue;
    box-shadow: blue 20px 20px 0 0 inset;
*/

/*
    Para fixar um elemento na página usamos a propriedade position com o valor fixed.
    Veja abaixo um exemplo de como é a declaração desta propriedade.
    Acompanha o movimento do scroll.

    div1{
        position: fixed;
        border: 2px red;
    }

    div2{
        border:2px;
    }

    Isso fará com que a div1, a primeiro momento, apareça em cima da div2. (pois ainda ela 
    não foi realocada para outro espaço, alem do default). Assim que descer com o scroll,
    verá que a div1 acompanha junto e se mantém sempre no mesmo lugar relativo posição do scroll.

    Para mover a div fixada, é necessário usar as propriedades top, bottom, left e right
    Essas propriedades aceitam qualquer dimensão.

    top -> move o elemento na vertical, de cima para baixo.
    bottom -> move o elemento na vertical, de baixo para cima.
    left -> move o elemento na horizontal, da esquerda para a direita.
    right -> move o elemento na horizontal, da direita para a esquerda.

    Essas propriedades foram criadas para serem usadas em conjuntos com a propriedade
    position. Sem essa propriedade elas não funcionam.

    exemplo:

    div1{
        position: fixed;
        border: 2px red;
        right: 10px;
    }

    A propriedade right posicionou o elemento na parte direita da página. Como demos 
    o valor 10 para right, a div1 ficou a 10px da borda direita
    Dessa maneira, funcionam as propriedades top, left and bottom.

    Na prática, as propriedades top e bottom não são utilizadas juntos, assim como
    as propriedades left e right.
*/

/*
    Para mover um elemento livremente na página usamos a propriedade position com o valor absolute
    Usando position: absolute; juntamente com as propriedades top, bottom, left e right,
    podemos mover um elemento livremente pela página.

    div1{
        position: absolute;
        top: 5px;
        left: 10px;
    }

    O atributo absolute move o objeto livremente em relação a página.
    Logo, caso mais elementos sejam colocados na página, é possível que isso quebre a posição
    ideal que os elementos estavam originalmente.

    Para resolver isso, basta usar o position: relative;

    Isso faz com que sua posição seja definida a partir do elemento pai.
*/

/*
    Display FlexBox
    O primeiro passo para utilizar o Flexbox é definir a propriedade display do container com o valor flex. 
    Isso é necessário para que as demais propriedades apresentem o resultado esperado.

    A sintaxe de uso dessa propriedade é a seguinte:

    .container {
        display: flex;
    }

    flex-direction
    A propriedade flex-direction deve ser aplicada ao container e define o eixo/fluxo de exibição 
    em que os elementos serão organizados.
    A sintaxe e os valores possíveis para essa propriedade são apresentados a seguir:

    .container {
        display: flex;
        flex-direction: [row / row-reverse / column / column-reverse];
    }

    row (padrão): Os itens são organizados em forma de linha da esquerda para a direita;
    row-reverse: Os itens são organizados em forma exibição em linha da direita para a esquerda;
    column: Os itens são organizados em forma de colunas iniciando de cima para baixo;
    column-reverse: Os itens são organizados em forma de colunas iniciando de baixo para cima.

    flex-wrap
    Por padrão os itens do container tentarão se ajustar em uma única linha dentro do container, 
    mas para isso a sua largura original pode ser ajustada para que todos caibam na largura do elemento pai.
    Com a propriedade flex-wrap aplicada ao container podemos alterar esse comportamento, fazendo com que 
    ocorra a “quebra de linha” nos itens.

    .container {
        display: flex;
        flex-wrap: [nowrap / wrap / wrap-reverse];
    }

    nowrap (padrão): Todos os itens serão dispostos em uma linha;
    wrap: Ocorrerá a quebra de linha e os itens mais à direita serão deslocados para a linha de baixo;
    wrap-reverse: Ocorrerá a quebra de linha e os itens mais à direita serão deslocados para a linha de cima;

    flex-flow
    Esta propriedade é uma forma abreviada para a escrita das propriedades flex-direction 
    e flex-wrap, nesta ordem. 
    Portanto, ela se aplica ao container.

    Normalmente essas propriedades são definidas uma a uma, da seguinte forma:

    .container {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
    }

    Já com o flex-flow podemos escrever as duas de forma simplificada:

    flex-flow: column wrap;

    justify-content
    A propriedade justify-content define o alinhamento dos itens ao longo do eixo principal do container. 
    A sintaxe e os valores possíveis para essa propriedade são apresentados a seguir:

    .container {
        display: flex;
        justify-content: [flex-start/flex-end/center/space-between/space-around];
    }

    flex-start (padrão): Os itens são alinhados a partir do início do eixo principal;
    flex-end: Os itens são alinhados a partir do fim do eixo principal;
    center: Os itens são alinhados ao centro do eixo principal;
    space-between: O primeiro item é deslocado para o início do eixo principal, o último é deslocado para
    o final do eixo principal e os demais são distribuídos uniformemente entre eles;
    space-around: Os itens são uniformemente distribuídos ao longo do eixo principal. Aqui, porém,
    são atribuídas margens iguais à esquerda e à direita (ou acima e abaixo, 
    dependendo da direção do eixo principal).

    Por isso o primeiro e o último item não ficam “colados” nas bordas do container.

    align-content
    Essa propriedade define como as linhas são distribuídas ao longo do eixo transversal do container.
    Ela só terá efeito se o elemento tiver mais de uma linha, ou seja, se ele tiver elementos suficientes
    para quebrar a linha e a propriedade flex-wrap:wrap tiver sido definida.
    A sintaxe e os valores possíveis para essa propriedade são apresentados a seguir:

    .container {
        display: flex;
        align-content: [stretch/flex-start/flex-end/center/space-between/space-around];
    }

    stretch (padrão): As linhas são distribuídas uniformemente ao longo do eixo transversal,
    ocupando todo o espaço disponível;
    flex-start: As linhas são distribuídas a partir do início do eixo transversal;
    flex-end: As linhas são distribuídas a partir do fim do eixo transversal;
    center: As linhas são mantidas no centro do eixo transversal;
    space-between: A primeira linha é deslocada para o início do eixo transversal, a última
    é deslocada para o final do eixo transversal e as
    demais são distribuídas uniformemente entre eles;

    space-around: As linhas são uniformemente distribuídas ao longo do eixo transversal.
    Aqui, porém, são atribuídas margens iguais à esquerda e à direita (ou acima e abaixo,
    dependendo da direção do eixo transversal).
    Por isso a primeira e a última linha não ficam “coladas” nas bordas do container.

    align-items
    Essa propriedade define como os itens são distribuídos ao longo do eixo transversal do container.
    A sintaxe e os valores possíveis para essa propriedade são apresentados a seguir:

    .container {
        display: flex;
        align-items: [stretch/flex-start/flex-end/center/baseline];
    }

    stretch (padrão): Os itens serão esticados para preencher
    toda a dimensão do eixo transversal (altura ou largura);
    flex-start: Os itens são deslocadas para o início do eixo transversal;
    flex-end: Os itens são deslocadas para o final do eixo transversal;
    center: Os itens são centralizados no eixo transversal;
    baseline: Os itens são alinhados a partir da base da primeira linha de texto de cada um.

    Order
    Por padrão, os itens são distribuídos no container na ordem em que são inseridos no HTML.
    No entanto, essa ordem pode ser alterada por meio da propriedade order, cuja sintaxe vemos abaixo:

    .item2 {
        order: [número];
    }

    O valor numérico atribuído a essa propriedade define a ordem do item. Por exemplo, o valor 2 faz
    com que o item seja o segundo item ao longo do eixo principal,
    enquanto o valor -1 faz com que ele apareça antes do primeiro.

    flex-grow
    Esta propriedade define a proporção com que um item deve crescer caso seja necessário.
    Por padrão seu valor é 0, o que indica que o item não deve crescer,
    e são aceitos apenas valores numéricos positivos.

    A sintaxe dessa propriedade é a seguinte:

    .item2 {
        flex-grow: [número];
    }

    flex-shrink
    Esta propriedade define a proporção com que um item deve encolher caso seja necessário.
    Essa propriedade aceita apenas valores positivos, e seu valor padrão é 1.

    A sintaxe dessa propriedade é a seguinte:

    .item2 {
        flex-shrink: [número];
    }

    flex-basis
    O flex-basis define o tamanho inicial que um item deve ter antes que o espaço ao seu
    redor seja distribuído. Ou seja, dependendo da direção do eixo principal (horizontal ou vertical),
    essa propriedade define a largura
    ou altura mínima do elemento antes que ele seja redimensionado por outras propriedades.

    A sintaxe dessa propriedade é a seguinte:

    .item2 {
        flex-basis: [número];
    }

    O valor atribuído a essa propriedade pode ser em percentual, em pixels, ou a palavra auto, que é o
    valor padrão (considera as dimensões do item - width e height).

    flex
    Esta propriedade é uma forma abreviada para a escrita das propriedades flex-grow,
    flex-shrink e flex-basis, nesta ordem.

    A sintaxe dessa propriedade é a seguinte:

    .item2 {
        flex: [flex-grow] [flex-shrink] [flex-basis];
    }

    align-self
    Esta propriedade permite sobrescrever no item o
    comportamento que foi definido pela propriedade align-items.

    A sintaxe e os valores possíveis para essa propriedade são apresentados a seguir:

    .item2 {
        align-self: [auto/stretch/flex-start/flex-end/center/baseline];
    }

    auto (padrão): Respeita o comportamento definido no container por meio do align-items;
    stretch: O item será esticado para preencher toda a dimensão do eixo transversal (altura ou largura);
    flex-start: O item é deslocado para o início do eixo transversal;
    flex-end: O item é deslocado para o final do eixo transversal;
    center: O item é centralizado no eixo transversal;
    baseline: O item é alinhado a partir da base da primeira linha de texto dos demais.


    

*/